module.exports = (phrase) => {

	let decomp = phrase.split(/ +/).join().normalize("NFD").replace(/[\u0300-\u036f]/g, "").toUpperCase();
	
	decomp = decomp.replace(/A/g, "ğŸ‡¦" );
	decomp = decomp.replace(/B/g, "ğŸ‡§" );
	decomp = decomp.replace(/C/g, "ğŸ‡¨" );
	decomp = decomp.replace(/D/g, "ğŸ‡©" );
	decomp = decomp.replace(/E/g, "ğŸ‡ª" );
	decomp = decomp.replace(/F/g, "ğŸ‡«" );
	decomp = decomp.replace(/G/g, "ğŸ‡¬" );
	decomp = decomp.replace(/H/g, "ğŸ‡­" );
	decomp = decomp.replace(/I/g, "ğŸ‡®" );
	decomp = decomp.replace(/J/g, "ğŸ‡¯" );
	decomp = decomp.replace(/K/g, "ğŸ‡°" );
	decomp = decomp.replace(/L/g, "ğŸ‡±" );
	decomp = decomp.replace(/M/g, "ğŸ‡²" );
	decomp = decomp.replace(/N/g, "ğŸ‡³" );
	decomp = decomp.replace(/O/g, "ğŸ‡´" );
	decomp = decomp.replace(/P/g, "ğŸ‡µ" );
	decomp = decomp.replace(/Q/g, "ğŸ‡¶" );
	decomp = decomp.replace(/R/g, "ğŸ‡·" );
	decomp = decomp.replace(/S/g, "ğŸ‡¸" );
	decomp = decomp.replace(/T/g, "ğŸ‡¹" );
	decomp = decomp.replace(/U/g, "ğŸ‡º" );
	decomp = decomp.replace(/V/g, "ğŸ‡»" );
	decomp = decomp.replace(/W/g, "ğŸ‡¼" );
	decomp = decomp.replace(/X/g, "ğŸ‡½" );
	decomp = decomp.replace(/Y/g, "ğŸ‡¾" );
	decomp = decomp.replace(/Z/g, "ğŸ‡¿" );

	return decomp;
	
}