const LANGFLAGS = {
    "en" : "ðŸ‡ºðŸ‡¸",
    "es" : "ðŸ‡ªðŸ‡¸",
    "de" : "ðŸ‡©ðŸ‡ª",
    "fr" : "ðŸ‡«ðŸ‡·",
    "ja" : "ðŸ‡¯ðŸ‡µ",
    "pt" : "ðŸ‡§ðŸ‡·",
    "af" : "ðŸ‡¿ðŸ‡¦",
    "am" : "ðŸ‡ªðŸ‡¹",
    "ar" : "ðŸ‡ªðŸ‡¬",
    "az" : "ðŸ‡¦ðŸ‡¿",
    "be" : "ðŸ‡§ðŸ‡¾",
    "bg" : "ðŸ‡§ðŸ‡¬",
    "bn" : "ðŸ‡§ðŸ‡©",
    "bs" : "ðŸ‡§ðŸ‡¦",
    "ca" : "ðŸ‡ªðŸ‡¸",
    "ceb" : "ðŸ‡µðŸ‡­",
    "co" : "ðŸ‡«ðŸ‡·",
    "cs" : "ðŸ‡¨ðŸ‡¿",
    "cy" : "ðŸ‡¬ðŸ‡§",
    "da" : "ðŸ‡©ðŸ‡°",
    "el" : "ðŸ‡¬ðŸ‡·",
    "et" : "ðŸ‡ªðŸ‡ª",
    "eu" : "ðŸ‡ªðŸ‡¸",
    "fa" : "ðŸ‡®ðŸ‡·",
    "fi" : "ðŸ‡«ðŸ‡®",
    "fy" : "ðŸ‡³ðŸ‡±",
    "ga" : "ðŸ‡®ðŸ‡ª",
    "gd" : "ðŸ‡¬ðŸ‡§",
    "gl" : "ðŸ‡ªðŸ‡¸",
    "gu" : "ðŸ‡®ðŸ‡³",
    "ha" : "ðŸ‡³ðŸ‡¬",
    "haw" : "ðŸ‡ºðŸ‡¸",
    "hi" : "ðŸ‡®ðŸ‡³",
    "hr" : "ðŸ‡­ðŸ‡·",
    "ht" : "ðŸ‡­ðŸ‡¹",
    "hu" : "ðŸ‡­ðŸ‡º",
    "hy" : "ðŸ‡¦ðŸ‡²",
    "id" : "ðŸ‡®ðŸ‡©",
    "ig" : "ðŸ‡³ðŸ‡¬",
    "is" : "ðŸ‡®ðŸ‡¸",
    "it" : "ðŸ‡®ðŸ‡¹",
    "iw" : "ðŸ‡®ðŸ‡±",
    "jw" : "ðŸ‡®ðŸ‡©",
    "ka" : "ðŸ‡¬ðŸ‡ª",
    "kk" : "ðŸ‡°ðŸ‡¿",
    "km" : "ðŸ‡°ðŸ‡­",
    "kn" : "ðŸ‡®ðŸ‡³",
    "ko" : "ðŸ‡°ðŸ‡·",
    "ku" : "ðŸ‡¹ðŸ‡·",
    "ky" : "ðŸ‡°ðŸ‡¬",
    "la" : "ðŸ‡»ðŸ‡¦",
    "lb" : "ðŸ‡±ðŸ‡º",
    "lo" : "ðŸ‡±ðŸ‡¦",
    "lt" : "ðŸ‡±ðŸ‡¹",
    "lv" : "ðŸ‡±ðŸ‡»",
    "mg" : "ðŸ‡²ðŸ‡¬",
    "mi" : "ðŸ‡³ðŸ‡¿",
    "mk" : "ðŸ‡²ðŸ‡°",
    "ml" : "ðŸ‡®ðŸ‡³",
    "mn" : "ðŸ‡²ðŸ‡³",
    "mr" : "ðŸ‡®ðŸ‡³",
    "ms" : "ðŸ‡²ðŸ‡¾",
    "mt" : "ðŸ‡²ðŸ‡¹",
    "my" : "ðŸ‡²ðŸ‡²",
    "ne" : "ðŸ‡³ðŸ‡µ",
    "nl" : "ðŸ‡³ðŸ‡±",
    "no" : "ðŸ‡³ðŸ‡´",
    "ny" : "ðŸ‡²ðŸ‡¼",
    "pl" : "ðŸ‡µðŸ‡±",
    "ps" : "ðŸ‡¦ðŸ‡«",
    "ro" : "ðŸ‡·ðŸ‡´",
    "ru" : "ðŸ‡·ðŸ‡º",
    "sd" : "ðŸ‡µðŸ‡°",
    "si" : "ðŸ‡±ðŸ‡°",
    "sk" : "ðŸ‡¸ðŸ‡°",
    "sl" : "ðŸ‡¸ðŸ‡®",
    "sm" : "ðŸ‡¼ðŸ‡¸",
    "sn" : "ðŸ‡¿ðŸ‡¼",
    "so" : "ðŸ‡¸ðŸ‡´",
    "sq" : "ðŸ‡¦ðŸ‡±",
    "sr" : "ðŸ‡·ðŸ‡¸",
    "st" : "ðŸ‡¿ðŸ‡¦",
    "su" : "ðŸ‡®ðŸ‡©",
    "sv" : "ðŸ‡¸ðŸ‡ª",
    "sw" : "ðŸ‡¹ðŸ‡¿",
    "ta" : "ðŸ‡®ðŸ‡³",
    "te" : "ðŸ‡®ðŸ‡³",
    "tg" : "ðŸ‡¹ðŸ‡¯",
    "th" : "ðŸ‡¹ðŸ‡­",
    "tl" : "ðŸ‡µðŸ‡­",
    "tr" : "ðŸ‡¹ðŸ‡·",
    "uk" : "ðŸ‡ºðŸ‡¦",
    "ur" : "ðŸ‡µðŸ‡°",
    "uz" : "ðŸ‡ºðŸ‡¿",
    "vi" : "ðŸ‡»ðŸ‡³",
    "xh" : "ðŸ‡¿ðŸ‡¦",
    "yo" : "ðŸ‡³ðŸ‡¬",
    "zh-cn" : "ðŸ‡¨ðŸ‡³",
    "zh-tw" : "ðŸ‡¹ðŸ‡¼",
    "zu" : "ðŸ‡¿ðŸ‡¦"
}

const translate = require('google-translate-api');
const DB = require("../database/db_ops");

module.exports = {
    LANGNAMES : translate.languages,
    LANGFLAGS,
    flagFromLang: function(locale){
        loc = locale.split("-")[0].toLowerCase();
        return {
            name: translate.languages[loc] || "Unknown",
            flag: LANGFLAGS[loc] || ":flag_white:"
          }
    },
    translate : function (textToTrans, langFrom, langTo,txOnly=false) {
        const locale = require('../../utils/i18node');
        const $t = locale.getT();
        return new Promise(async resolve => {
            translate(textToTrans, {
                from: langFrom,
                to: langTo
            }).then(res => {
                let langFromPost = res.from.language.iso;
                const gear = require("../utilities/Gearbox");
                const embed = new gear.Embed;
                embed.title("Pollux Machine Translation 5000")
                if(textToTrans.length>1015) embed.description = $t('responses.warnings.translationTexTooLong',{lngs:[langTo,langFrom,'en','dev']});
                embed.field(`${LANGFLAGS[langFromPost]} ${translate.languages[langFromPost]}`, (textToTrans.length<1015?"*```tex\n":"") + textToTrans + "```*")
                embed.field(`${LANGFLAGS[langTo]} ${translate.languages[langTo]}`,  (textToTrans.length<1015?"```fix\n":"")  + res.text + "```")
                if (txOnly) return resolve(res.text);                
                resolve({embed});
            }).catch(err => {
                console.error(err);
                resolve("ERROR");
            });
        })
    },
    grabLang : async function (msg) {

        let svData, chData, langTo, langFrom, textToTrans;
        await Promise.all([
            svData = (await DB.channels.get(msg.channel.id)),
            chData = (await DB.servers.get(msg.guild.id))
        ]);

        let langsAvailable = Object.keys(translate.languages);
        if (msg.args.length > 2) {
            if (langsAvailable.includes(msg.args[0]) && langsAvailable.includes(msg.args[1])) {
                langFrom = msg.args[0]
                langTo = msg.args[1]
                textToTrans = msg.args.slice(2).join(' ')
            } else {
                oneArg()
            }
        } else if (msg.args.length > 1) {
            oneArg()
        }

        function oneArg() {
            if (langsAvailable.includes(msg.args[0])) {
                langTo = msg.args[0]
                textToTrans = msg.args.slice(1).join(' ')
            }
        }

        if (!langTo) {
            langTo = (chData.LANGUAGE || svData.modules.LANGUAGE || 'en').split('-')[0];
            textToTrans = msg.args.join(' ')
        }
        if (langTo === "dev") langTo = "en";

        return {textToTrans,langFrom,langTo};
        
    }

}